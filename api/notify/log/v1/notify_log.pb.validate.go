// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/notify/log/notify_log.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListLogRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListLogRequestMultiError,
// or nil if none found.
func (m *ListLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListLogRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListLogRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Index != nil {
		// no validation rules for Index
	}

	if m.User != nil {
		// no validation rules for User
	}

	if m.NotifyId != nil {
		// no validation rules for NotifyId
	}

	if m.ChannelId != nil {
		// no validation rules for ChannelId
	}

	if len(errors) > 0 {
		return ListLogRequestMultiError(errors)
	}

	return nil
}

// ListLogRequestMultiError is an error wrapping multiple validation errors
// returned by ListLogRequest.ValidateAll() if the designated constraints
// aren't met.
type ListLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogRequestMultiError) AllErrors() []error { return m }

// ListLogRequestValidationError is the validation error returned by
// ListLogRequest.Validate if the designated constraints aren't met.
type ListLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogRequestValidationError) ErrorName() string { return "ListLogRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogRequestValidationError{}

// Validate checks the field values on ListLogReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListLogReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListLogReplyMultiError, or
// nil if none found.
func (m *ListLogReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLogReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLogReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLogReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLogReplyMultiError(errors)
	}

	return nil
}

// ListLogReplyMultiError is an error wrapping multiple validation errors
// returned by ListLogReply.ValidateAll() if the designated constraints aren't met.
type ListLogReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogReplyMultiError) AllErrors() []error { return m }

// ListLogReplyValidationError is the validation error returned by
// ListLogReply.Validate if the designated constraints aren't met.
type ListLogReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogReplyValidationError) ErrorName() string { return "ListLogReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListLogReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogReplyValidationError{}

// Validate checks the field values on ListLogReply_Channel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLogReply_Channel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogReply_Channel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLogReply_ChannelMultiError, or nil if none found.
func (m *ListLogReply_Channel) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogReply_Channel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListLogReply_ChannelMultiError(errors)
	}

	return nil
}

// ListLogReply_ChannelMultiError is an error wrapping multiple validation
// errors returned by ListLogReply_Channel.ValidateAll() if the designated
// constraints aren't met.
type ListLogReply_ChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogReply_ChannelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogReply_ChannelMultiError) AllErrors() []error { return m }

// ListLogReply_ChannelValidationError is the validation error returned by
// ListLogReply_Channel.Validate if the designated constraints aren't met.
type ListLogReply_ChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogReply_ChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogReply_ChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogReply_ChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogReply_ChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogReply_ChannelValidationError) ErrorName() string {
	return "ListLogReply_ChannelValidationError"
}

// Error satisfies the builtin error interface
func (e ListLogReply_ChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogReply_Channel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogReply_ChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogReply_ChannelValidationError{}

// Validate checks the field values on ListLogReply_Notify with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLogReply_Notify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogReply_Notify with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLogReply_NotifyMultiError, or nil if none found.
func (m *ListLogReply_Notify) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogReply_Notify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListLogReply_NotifyMultiError(errors)
	}

	return nil
}

// ListLogReply_NotifyMultiError is an error wrapping multiple validation
// errors returned by ListLogReply_Notify.ValidateAll() if the designated
// constraints aren't met.
type ListLogReply_NotifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogReply_NotifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogReply_NotifyMultiError) AllErrors() []error { return m }

// ListLogReply_NotifyValidationError is the validation error returned by
// ListLogReply_Notify.Validate if the designated constraints aren't met.
type ListLogReply_NotifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogReply_NotifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogReply_NotifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogReply_NotifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogReply_NotifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogReply_NotifyValidationError) ErrorName() string {
	return "ListLogReply_NotifyValidationError"
}

// Error satisfies the builtin error interface
func (e ListLogReply_NotifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogReply_Notify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogReply_NotifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogReply_NotifyValidationError{}

// Validate checks the field values on ListLogReply_Log with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLogReply_Log) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogReply_Log with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLogReply_LogMultiError, or nil if none found.
func (m *ListLogReply_Log) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogReply_Log) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NotifyId

	// no validation rules for ChannelId

	// no validation rules for User

	// no validation rules for Content

	// no validation rules for FromServer

	// no validation rules for FromIp

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetChannel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListLogReply_LogValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListLogReply_LogValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLogReply_LogValidationError{
				field:  "Channel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNotify()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListLogReply_LogValidationError{
					field:  "Notify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListLogReply_LogValidationError{
					field:  "Notify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotify()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLogReply_LogValidationError{
				field:  "Notify",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Reason != nil {
		// no validation rules for Reason
	}

	if len(errors) > 0 {
		return ListLogReply_LogMultiError(errors)
	}

	return nil
}

// ListLogReply_LogMultiError is an error wrapping multiple validation errors
// returned by ListLogReply_Log.ValidateAll() if the designated constraints
// aren't met.
type ListLogReply_LogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogReply_LogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogReply_LogMultiError) AllErrors() []error { return m }

// ListLogReply_LogValidationError is the validation error returned by
// ListLogReply_Log.Validate if the designated constraints aren't met.
type ListLogReply_LogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogReply_LogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogReply_LogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogReply_LogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogReply_LogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogReply_LogValidationError) ErrorName() string { return "ListLogReply_LogValidationError" }

// Error satisfies the builtin error interface
func (e ListLogReply_LogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogReply_Log.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogReply_LogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogReply_LogValidationError{}
