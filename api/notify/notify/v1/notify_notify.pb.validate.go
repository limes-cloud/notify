// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/notify/notify/notify_notify.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListNotifyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNotifyRequestMultiError, or nil if none found.
func (m *ListNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListNotifyRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListNotifyRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.CategoryId != nil {
		// no validation rules for CategoryId
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if len(errors) > 0 {
		return ListNotifyRequestMultiError(errors)
	}

	return nil
}

// ListNotifyRequestMultiError is an error wrapping multiple validation errors
// returned by ListNotifyRequest.ValidateAll() if the designated constraints
// aren't met.
type ListNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNotifyRequestMultiError) AllErrors() []error { return m }

// ListNotifyRequestValidationError is the validation error returned by
// ListNotifyRequest.Validate if the designated constraints aren't met.
type ListNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotifyRequestValidationError) ErrorName() string {
	return "ListNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotifyRequestValidationError{}

// Validate checks the field values on ListNotifyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListNotifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNotifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNotifyReplyMultiError, or nil if none found.
func (m *ListNotifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNotifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNotifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNotifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNotifyReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListNotifyReplyMultiError(errors)
	}

	return nil
}

// ListNotifyReplyMultiError is an error wrapping multiple validation errors
// returned by ListNotifyReply.ValidateAll() if the designated constraints
// aren't met.
type ListNotifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNotifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNotifyReplyMultiError) AllErrors() []error { return m }

// ListNotifyReplyValidationError is the validation error returned by
// ListNotifyReply.Validate if the designated constraints aren't met.
type ListNotifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotifyReplyValidationError) ErrorName() string { return "ListNotifyReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListNotifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotifyReplyValidationError{}

// Validate checks the field values on CreateNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotifyRequestMultiError, or nil if none found.
func (m *CreateNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryId

	// no validation rules for Keyword

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for SendMode

	// no validation rules for Description

	if m.IsTimely != nil {
		// no validation rules for IsTimely
	}

	if m.Expire != nil {
		// no validation rules for Expire
	}

	if m.Cache != nil {
		// no validation rules for Cache
	}

	if len(errors) > 0 {
		return CreateNotifyRequestMultiError(errors)
	}

	return nil
}

// CreateNotifyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateNotifyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotifyRequestMultiError) AllErrors() []error { return m }

// CreateNotifyRequestValidationError is the validation error returned by
// CreateNotifyRequest.Validate if the designated constraints aren't met.
type CreateNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotifyRequestValidationError) ErrorName() string {
	return "CreateNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotifyRequestValidationError{}

// Validate checks the field values on CreateNotifyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateNotifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotifyReplyMultiError, or nil if none found.
func (m *CreateNotifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateNotifyReplyMultiError(errors)
	}

	return nil
}

// CreateNotifyReplyMultiError is an error wrapping multiple validation errors
// returned by CreateNotifyReply.ValidateAll() if the designated constraints
// aren't met.
type CreateNotifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotifyReplyMultiError) AllErrors() []error { return m }

// CreateNotifyReplyValidationError is the validation error returned by
// CreateNotifyReply.Validate if the designated constraints aren't met.
type CreateNotifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotifyReplyValidationError) ErrorName() string {
	return "CreateNotifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotifyReplyValidationError{}

// Validate checks the field values on UpdateNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotifyRequestMultiError, or nil if none found.
func (m *UpdateNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateNotifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CategoryId

	// no validation rules for Keyword

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for SendMode

	// no validation rules for Description

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.IsTimely != nil {
		// no validation rules for IsTimely
	}

	if m.Expire != nil {
		// no validation rules for Expire
	}

	if m.Cache != nil {
		// no validation rules for Cache
	}

	if len(errors) > 0 {
		return UpdateNotifyRequestMultiError(errors)
	}

	return nil
}

// UpdateNotifyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateNotifyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyRequestMultiError) AllErrors() []error { return m }

// UpdateNotifyRequestValidationError is the validation error returned by
// UpdateNotifyRequest.Validate if the designated constraints aren't met.
type UpdateNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyRequestValidationError) ErrorName() string {
	return "UpdateNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyRequestValidationError{}

// Validate checks the field values on UpdateNotifyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotifyReplyMultiError, or nil if none found.
func (m *UpdateNotifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateNotifyReplyMultiError(errors)
	}

	return nil
}

// UpdateNotifyReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateNotifyReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateNotifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyReplyMultiError) AllErrors() []error { return m }

// UpdateNotifyReplyValidationError is the validation error returned by
// UpdateNotifyReply.Validate if the designated constraints aren't met.
type UpdateNotifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyReplyValidationError) ErrorName() string {
	return "UpdateNotifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyReplyValidationError{}

// Validate checks the field values on DeleteNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotifyRequestMultiError, or nil if none found.
func (m *DeleteNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteNotifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteNotifyRequestMultiError(errors)
	}

	return nil
}

// DeleteNotifyRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNotifyRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotifyRequestMultiError) AllErrors() []error { return m }

// DeleteNotifyRequestValidationError is the validation error returned by
// DeleteNotifyRequest.Validate if the designated constraints aren't met.
type DeleteNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotifyRequestValidationError) ErrorName() string {
	return "DeleteNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotifyRequestValidationError{}

// Validate checks the field values on DeleteNotifyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotifyReplyMultiError, or nil if none found.
func (m *DeleteNotifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteNotifyReplyMultiError(errors)
	}

	return nil
}

// DeleteNotifyReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteNotifyReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteNotifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotifyReplyMultiError) AllErrors() []error { return m }

// DeleteNotifyReplyValidationError is the validation error returned by
// DeleteNotifyReply.Validate if the designated constraints aren't met.
type DeleteNotifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotifyReplyValidationError) ErrorName() string {
	return "DeleteNotifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotifyReplyValidationError{}

// Validate checks the field values on ListNotifyReply_Notify with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNotifyReply_Notify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNotifyReply_Notify with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNotifyReply_NotifyMultiError, or nil if none found.
func (m *ListNotifyReply_Notify) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNotifyReply_Notify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CategoryId

	// no validation rules for Keyword

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for SendMode

	// no validation rules for Description

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.IsTimely != nil {
		// no validation rules for IsTimely
	}

	if m.Expire != nil {
		// no validation rules for Expire
	}

	if m.Cache != nil {
		// no validation rules for Cache
	}

	if m.Category != nil {

		if all {
			switch v := interface{}(m.GetCategory()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNotifyReply_NotifyValidationError{
						field:  "Category",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNotifyReply_NotifyValidationError{
						field:  "Category",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNotifyReply_NotifyValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListNotifyReply_NotifyMultiError(errors)
	}

	return nil
}

// ListNotifyReply_NotifyMultiError is an error wrapping multiple validation
// errors returned by ListNotifyReply_Notify.ValidateAll() if the designated
// constraints aren't met.
type ListNotifyReply_NotifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNotifyReply_NotifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNotifyReply_NotifyMultiError) AllErrors() []error { return m }

// ListNotifyReply_NotifyValidationError is the validation error returned by
// ListNotifyReply_Notify.Validate if the designated constraints aren't met.
type ListNotifyReply_NotifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotifyReply_NotifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotifyReply_NotifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotifyReply_NotifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotifyReply_NotifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotifyReply_NotifyValidationError) ErrorName() string {
	return "ListNotifyReply_NotifyValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotifyReply_NotifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotifyReply_Notify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotifyReply_NotifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotifyReply_NotifyValidationError{}

// Validate checks the field values on ListNotifyReply_Notify_Category with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNotifyReply_Notify_Category) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNotifyReply_Notify_Category with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListNotifyReply_Notify_CategoryMultiError, or nil if none found.
func (m *ListNotifyReply_Notify_Category) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNotifyReply_Notify_Category) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListNotifyReply_Notify_CategoryMultiError(errors)
	}

	return nil
}

// ListNotifyReply_Notify_CategoryMultiError is an error wrapping multiple
// validation errors returned by ListNotifyReply_Notify_Category.ValidateAll()
// if the designated constraints aren't met.
type ListNotifyReply_Notify_CategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNotifyReply_Notify_CategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNotifyReply_Notify_CategoryMultiError) AllErrors() []error { return m }

// ListNotifyReply_Notify_CategoryValidationError is the validation error
// returned by ListNotifyReply_Notify_Category.Validate if the designated
// constraints aren't met.
type ListNotifyReply_Notify_CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotifyReply_Notify_CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotifyReply_Notify_CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotifyReply_Notify_CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotifyReply_Notify_CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotifyReply_Notify_CategoryValidationError) ErrorName() string {
	return "ListNotifyReply_Notify_CategoryValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotifyReply_Notify_CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotifyReply_Notify_Category.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotifyReply_Notify_CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotifyReply_Notify_CategoryValidationError{}
