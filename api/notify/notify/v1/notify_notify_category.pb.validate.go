// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/notify/notify/notify_notify_category.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListNotifyCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNotifyCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNotifyCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNotifyCategoryRequestMultiError, or nil if none found.
func (m *ListNotifyCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNotifyCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListNotifyCategoryRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListNotifyCategoryRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListNotifyCategoryRequestMultiError(errors)
	}

	return nil
}

// ListNotifyCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by ListNotifyCategoryRequest.ValidateAll() if the
// designated constraints aren't met.
type ListNotifyCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNotifyCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNotifyCategoryRequestMultiError) AllErrors() []error { return m }

// ListNotifyCategoryRequestValidationError is the validation error returned by
// ListNotifyCategoryRequest.Validate if the designated constraints aren't met.
type ListNotifyCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotifyCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotifyCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotifyCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotifyCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotifyCategoryRequestValidationError) ErrorName() string {
	return "ListNotifyCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotifyCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotifyCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotifyCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotifyCategoryRequestValidationError{}

// Validate checks the field values on ListNotifyCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNotifyCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNotifyCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNotifyCategoryReplyMultiError, or nil if none found.
func (m *ListNotifyCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNotifyCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNotifyCategoryReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNotifyCategoryReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNotifyCategoryReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListNotifyCategoryReplyMultiError(errors)
	}

	return nil
}

// ListNotifyCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by ListNotifyCategoryReply.ValidateAll() if the designated
// constraints aren't met.
type ListNotifyCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNotifyCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNotifyCategoryReplyMultiError) AllErrors() []error { return m }

// ListNotifyCategoryReplyValidationError is the validation error returned by
// ListNotifyCategoryReply.Validate if the designated constraints aren't met.
type ListNotifyCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotifyCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotifyCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotifyCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotifyCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotifyCategoryReplyValidationError) ErrorName() string {
	return "ListNotifyCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotifyCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotifyCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotifyCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotifyCategoryReplyValidationError{}

// Validate checks the field values on CreateNotifyCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotifyCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotifyCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotifyCategoryRequestMultiError, or nil if none found.
func (m *CreateNotifyCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotifyCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateNotifyCategoryRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := CreateNotifyCategoryRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateNotifyCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateNotifyCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by CreateNotifyCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateNotifyCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotifyCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotifyCategoryRequestMultiError) AllErrors() []error { return m }

// CreateNotifyCategoryRequestValidationError is the validation error returned
// by CreateNotifyCategoryRequest.Validate if the designated constraints
// aren't met.
type CreateNotifyCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotifyCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotifyCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotifyCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotifyCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotifyCategoryRequestValidationError) ErrorName() string {
	return "CreateNotifyCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotifyCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotifyCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotifyCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotifyCategoryRequestValidationError{}

// Validate checks the field values on CreateNotifyCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotifyCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotifyCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotifyCategoryReplyMultiError, or nil if none found.
func (m *CreateNotifyCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotifyCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateNotifyCategoryReplyMultiError(errors)
	}

	return nil
}

// CreateNotifyCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by CreateNotifyCategoryReply.ValidateAll() if the
// designated constraints aren't met.
type CreateNotifyCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotifyCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotifyCategoryReplyMultiError) AllErrors() []error { return m }

// CreateNotifyCategoryReplyValidationError is the validation error returned by
// CreateNotifyCategoryReply.Validate if the designated constraints aren't met.
type CreateNotifyCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotifyCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotifyCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotifyCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotifyCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotifyCategoryReplyValidationError) ErrorName() string {
	return "CreateNotifyCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotifyCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotifyCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotifyCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotifyCategoryReplyValidationError{}

// Validate checks the field values on UpdateNotifyCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotifyCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotifyCategoryRequestMultiError, or nil if none found.
func (m *UpdateNotifyCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateNotifyCategoryRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateNotifyCategoryRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := UpdateNotifyCategoryRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateNotifyCategoryRequestMultiError(errors)
	}

	return nil
}

// UpdateNotifyCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateNotifyCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateNotifyCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyCategoryRequestMultiError) AllErrors() []error { return m }

// UpdateNotifyCategoryRequestValidationError is the validation error returned
// by UpdateNotifyCategoryRequest.Validate if the designated constraints
// aren't met.
type UpdateNotifyCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyCategoryRequestValidationError) ErrorName() string {
	return "UpdateNotifyCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyCategoryRequestValidationError{}

// Validate checks the field values on UpdateNotifyCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotifyCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotifyCategoryReplyMultiError, or nil if none found.
func (m *UpdateNotifyCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateNotifyCategoryReplyMultiError(errors)
	}

	return nil
}

// UpdateNotifyCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateNotifyCategoryReply.ValidateAll() if the
// designated constraints aren't met.
type UpdateNotifyCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyCategoryReplyMultiError) AllErrors() []error { return m }

// UpdateNotifyCategoryReplyValidationError is the validation error returned by
// UpdateNotifyCategoryReply.Validate if the designated constraints aren't met.
type UpdateNotifyCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyCategoryReplyValidationError) ErrorName() string {
	return "UpdateNotifyCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyCategoryReplyValidationError{}

// Validate checks the field values on DeleteNotifyCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotifyCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotifyCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotifyCategoryRequestMultiError, or nil if none found.
func (m *DeleteNotifyCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotifyCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteNotifyCategoryRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteNotifyCategoryRequestMultiError(errors)
	}

	return nil
}

// DeleteNotifyCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteNotifyCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteNotifyCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotifyCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotifyCategoryRequestMultiError) AllErrors() []error { return m }

// DeleteNotifyCategoryRequestValidationError is the validation error returned
// by DeleteNotifyCategoryRequest.Validate if the designated constraints
// aren't met.
type DeleteNotifyCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotifyCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotifyCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotifyCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotifyCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotifyCategoryRequestValidationError) ErrorName() string {
	return "DeleteNotifyCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotifyCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotifyCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotifyCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotifyCategoryRequestValidationError{}

// Validate checks the field values on DeleteNotifyCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotifyCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotifyCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotifyCategoryReplyMultiError, or nil if none found.
func (m *DeleteNotifyCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotifyCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteNotifyCategoryReplyMultiError(errors)
	}

	return nil
}

// DeleteNotifyCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteNotifyCategoryReply.ValidateAll() if the
// designated constraints aren't met.
type DeleteNotifyCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotifyCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotifyCategoryReplyMultiError) AllErrors() []error { return m }

// DeleteNotifyCategoryReplyValidationError is the validation error returned by
// DeleteNotifyCategoryReply.Validate if the designated constraints aren't met.
type DeleteNotifyCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotifyCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotifyCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotifyCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotifyCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotifyCategoryReplyValidationError) ErrorName() string {
	return "DeleteNotifyCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotifyCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotifyCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotifyCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotifyCategoryReplyValidationError{}

// Validate checks the field values on ListNotifyCategoryReply_NotifyCategory
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListNotifyCategoryReply_NotifyCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListNotifyCategoryReply_NotifyCategory with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListNotifyCategoryReply_NotifyCategoryMultiError, or nil if none found.
func (m *ListNotifyCategoryReply_NotifyCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNotifyCategoryReply_NotifyCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return ListNotifyCategoryReply_NotifyCategoryMultiError(errors)
	}

	return nil
}

// ListNotifyCategoryReply_NotifyCategoryMultiError is an error wrapping
// multiple validation errors returned by
// ListNotifyCategoryReply_NotifyCategory.ValidateAll() if the designated
// constraints aren't met.
type ListNotifyCategoryReply_NotifyCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNotifyCategoryReply_NotifyCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNotifyCategoryReply_NotifyCategoryMultiError) AllErrors() []error { return m }

// ListNotifyCategoryReply_NotifyCategoryValidationError is the validation
// error returned by ListNotifyCategoryReply_NotifyCategory.Validate if the
// designated constraints aren't met.
type ListNotifyCategoryReply_NotifyCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotifyCategoryReply_NotifyCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotifyCategoryReply_NotifyCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotifyCategoryReply_NotifyCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotifyCategoryReply_NotifyCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotifyCategoryReply_NotifyCategoryValidationError) ErrorName() string {
	return "ListNotifyCategoryReply_NotifyCategoryValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotifyCategoryReply_NotifyCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotifyCategoryReply_NotifyCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotifyCategoryReply_NotifyCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotifyCategoryReply_NotifyCategoryValidationError{}
