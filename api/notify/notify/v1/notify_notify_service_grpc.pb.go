// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/notify/notify/notify_notify_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Notify_ListNotifyCategory_FullMethodName   = "/notify.api.notify.notify.v1.Notify/ListNotifyCategory"
	Notify_CreateNotifyCategory_FullMethodName = "/notify.api.notify.notify.v1.Notify/CreateNotifyCategory"
	Notify_UpdateNotifyCategory_FullMethodName = "/notify.api.notify.notify.v1.Notify/UpdateNotifyCategory"
	Notify_DeleteNotifyCategory_FullMethodName = "/notify.api.notify.notify.v1.Notify/DeleteNotifyCategory"
	Notify_ListNotify_FullMethodName           = "/notify.api.notify.notify.v1.Notify/ListNotify"
	Notify_CreateNotify_FullMethodName         = "/notify.api.notify.notify.v1.Notify/CreateNotify"
	Notify_UpdateNotify_FullMethodName         = "/notify.api.notify.notify.v1.Notify/UpdateNotify"
	Notify_DeleteNotify_FullMethodName         = "/notify.api.notify.notify.v1.Notify/DeleteNotify"
)

// NotifyClient is the client API for Notify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifyClient interface {
	// ListNotifyCategory 获取通知分类列表
	ListNotifyCategory(ctx context.Context, in *ListNotifyCategoryRequest, opts ...grpc.CallOption) (*ListNotifyCategoryReply, error)
	// CreateNotifyCategory 创建通知分类
	CreateNotifyCategory(ctx context.Context, in *CreateNotifyCategoryRequest, opts ...grpc.CallOption) (*CreateNotifyCategoryReply, error)
	// UpdateNotifyCategory 更新通知分类
	UpdateNotifyCategory(ctx context.Context, in *UpdateNotifyCategoryRequest, opts ...grpc.CallOption) (*UpdateNotifyCategoryReply, error)
	// DeleteNotifyCategory 删除通知分类
	DeleteNotifyCategory(ctx context.Context, in *DeleteNotifyCategoryRequest, opts ...grpc.CallOption) (*DeleteNotifyCategoryReply, error)
	// ListNotify 获取通知列表
	ListNotify(ctx context.Context, in *ListNotifyRequest, opts ...grpc.CallOption) (*ListNotifyReply, error)
	// CreateNotify 创建通知
	CreateNotify(ctx context.Context, in *CreateNotifyRequest, opts ...grpc.CallOption) (*CreateNotifyReply, error)
	// UpdateNotify 更新通知
	UpdateNotify(ctx context.Context, in *UpdateNotifyRequest, opts ...grpc.CallOption) (*UpdateNotifyReply, error)
	// DeleteNotify 删除通知
	DeleteNotify(ctx context.Context, in *DeleteNotifyRequest, opts ...grpc.CallOption) (*DeleteNotifyReply, error)
}

type notifyClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifyClient(cc grpc.ClientConnInterface) NotifyClient {
	return &notifyClient{cc}
}

func (c *notifyClient) ListNotifyCategory(ctx context.Context, in *ListNotifyCategoryRequest, opts ...grpc.CallOption) (*ListNotifyCategoryReply, error) {
	out := new(ListNotifyCategoryReply)
	err := c.cc.Invoke(ctx, Notify_ListNotifyCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) CreateNotifyCategory(ctx context.Context, in *CreateNotifyCategoryRequest, opts ...grpc.CallOption) (*CreateNotifyCategoryReply, error) {
	out := new(CreateNotifyCategoryReply)
	err := c.cc.Invoke(ctx, Notify_CreateNotifyCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) UpdateNotifyCategory(ctx context.Context, in *UpdateNotifyCategoryRequest, opts ...grpc.CallOption) (*UpdateNotifyCategoryReply, error) {
	out := new(UpdateNotifyCategoryReply)
	err := c.cc.Invoke(ctx, Notify_UpdateNotifyCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) DeleteNotifyCategory(ctx context.Context, in *DeleteNotifyCategoryRequest, opts ...grpc.CallOption) (*DeleteNotifyCategoryReply, error) {
	out := new(DeleteNotifyCategoryReply)
	err := c.cc.Invoke(ctx, Notify_DeleteNotifyCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) ListNotify(ctx context.Context, in *ListNotifyRequest, opts ...grpc.CallOption) (*ListNotifyReply, error) {
	out := new(ListNotifyReply)
	err := c.cc.Invoke(ctx, Notify_ListNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) CreateNotify(ctx context.Context, in *CreateNotifyRequest, opts ...grpc.CallOption) (*CreateNotifyReply, error) {
	out := new(CreateNotifyReply)
	err := c.cc.Invoke(ctx, Notify_CreateNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) UpdateNotify(ctx context.Context, in *UpdateNotifyRequest, opts ...grpc.CallOption) (*UpdateNotifyReply, error) {
	out := new(UpdateNotifyReply)
	err := c.cc.Invoke(ctx, Notify_UpdateNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) DeleteNotify(ctx context.Context, in *DeleteNotifyRequest, opts ...grpc.CallOption) (*DeleteNotifyReply, error) {
	out := new(DeleteNotifyReply)
	err := c.cc.Invoke(ctx, Notify_DeleteNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyServer is the server API for Notify service.
// All implementations must embed UnimplementedNotifyServer
// for forward compatibility
type NotifyServer interface {
	// ListNotifyCategory 获取通知分类列表
	ListNotifyCategory(context.Context, *ListNotifyCategoryRequest) (*ListNotifyCategoryReply, error)
	// CreateNotifyCategory 创建通知分类
	CreateNotifyCategory(context.Context, *CreateNotifyCategoryRequest) (*CreateNotifyCategoryReply, error)
	// UpdateNotifyCategory 更新通知分类
	UpdateNotifyCategory(context.Context, *UpdateNotifyCategoryRequest) (*UpdateNotifyCategoryReply, error)
	// DeleteNotifyCategory 删除通知分类
	DeleteNotifyCategory(context.Context, *DeleteNotifyCategoryRequest) (*DeleteNotifyCategoryReply, error)
	// ListNotify 获取通知列表
	ListNotify(context.Context, *ListNotifyRequest) (*ListNotifyReply, error)
	// CreateNotify 创建通知
	CreateNotify(context.Context, *CreateNotifyRequest) (*CreateNotifyReply, error)
	// UpdateNotify 更新通知
	UpdateNotify(context.Context, *UpdateNotifyRequest) (*UpdateNotifyReply, error)
	// DeleteNotify 删除通知
	DeleteNotify(context.Context, *DeleteNotifyRequest) (*DeleteNotifyReply, error)
	mustEmbedUnimplementedNotifyServer()
}

// UnimplementedNotifyServer must be embedded to have forward compatible implementations.
type UnimplementedNotifyServer struct {
}

func (UnimplementedNotifyServer) ListNotifyCategory(context.Context, *ListNotifyCategoryRequest) (*ListNotifyCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifyCategory not implemented")
}
func (UnimplementedNotifyServer) CreateNotifyCategory(context.Context, *CreateNotifyCategoryRequest) (*CreateNotifyCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifyCategory not implemented")
}
func (UnimplementedNotifyServer) UpdateNotifyCategory(context.Context, *UpdateNotifyCategoryRequest) (*UpdateNotifyCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifyCategory not implemented")
}
func (UnimplementedNotifyServer) DeleteNotifyCategory(context.Context, *DeleteNotifyCategoryRequest) (*DeleteNotifyCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotifyCategory not implemented")
}
func (UnimplementedNotifyServer) ListNotify(context.Context, *ListNotifyRequest) (*ListNotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotify not implemented")
}
func (UnimplementedNotifyServer) CreateNotify(context.Context, *CreateNotifyRequest) (*CreateNotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotify not implemented")
}
func (UnimplementedNotifyServer) UpdateNotify(context.Context, *UpdateNotifyRequest) (*UpdateNotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotify not implemented")
}
func (UnimplementedNotifyServer) DeleteNotify(context.Context, *DeleteNotifyRequest) (*DeleteNotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotify not implemented")
}
func (UnimplementedNotifyServer) mustEmbedUnimplementedNotifyServer() {}

// UnsafeNotifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifyServer will
// result in compilation errors.
type UnsafeNotifyServer interface {
	mustEmbedUnimplementedNotifyServer()
}

func RegisterNotifyServer(s grpc.ServiceRegistrar, srv NotifyServer) {
	s.RegisterService(&Notify_ServiceDesc, srv)
}

func _Notify_ListNotifyCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotifyCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).ListNotifyCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notify_ListNotifyCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).ListNotifyCategory(ctx, req.(*ListNotifyCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_CreateNotifyCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifyCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).CreateNotifyCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notify_CreateNotifyCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).CreateNotifyCategory(ctx, req.(*CreateNotifyCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_UpdateNotifyCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifyCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).UpdateNotifyCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notify_UpdateNotifyCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).UpdateNotifyCategory(ctx, req.(*UpdateNotifyCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_DeleteNotifyCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotifyCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).DeleteNotifyCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notify_DeleteNotifyCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).DeleteNotifyCategory(ctx, req.(*DeleteNotifyCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_ListNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).ListNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notify_ListNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).ListNotify(ctx, req.(*ListNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_CreateNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).CreateNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notify_CreateNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).CreateNotify(ctx, req.(*CreateNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_UpdateNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).UpdateNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notify_UpdateNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).UpdateNotify(ctx, req.(*UpdateNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_DeleteNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).DeleteNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notify_DeleteNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).DeleteNotify(ctx, req.(*DeleteNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Notify_ServiceDesc is the grpc.ServiceDesc for Notify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notify.api.notify.notify.v1.Notify",
	HandlerType: (*NotifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNotifyCategory",
			Handler:    _Notify_ListNotifyCategory_Handler,
		},
		{
			MethodName: "CreateNotifyCategory",
			Handler:    _Notify_CreateNotifyCategory_Handler,
		},
		{
			MethodName: "UpdateNotifyCategory",
			Handler:    _Notify_UpdateNotifyCategory_Handler,
		},
		{
			MethodName: "DeleteNotifyCategory",
			Handler:    _Notify_DeleteNotifyCategory_Handler,
		},
		{
			MethodName: "ListNotify",
			Handler:    _Notify_ListNotify_Handler,
		},
		{
			MethodName: "CreateNotify",
			Handler:    _Notify_CreateNotify_Handler,
		},
		{
			MethodName: "UpdateNotify",
			Handler:    _Notify_UpdateNotify_Handler,
		},
		{
			MethodName: "DeleteNotify",
			Handler:    _Notify_DeleteNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/notify/notify/notify_notify_service.proto",
}
