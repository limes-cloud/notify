// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/notify/notify/notify_notify_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNotifyCreateNotify = "/notify.api.notify.notify.v1.Notify/CreateNotify"
const OperationNotifyCreateNotifyCategory = "/notify.api.notify.notify.v1.Notify/CreateNotifyCategory"
const OperationNotifyDeleteNotify = "/notify.api.notify.notify.v1.Notify/DeleteNotify"
const OperationNotifyDeleteNotifyCategory = "/notify.api.notify.notify.v1.Notify/DeleteNotifyCategory"
const OperationNotifyListNotify = "/notify.api.notify.notify.v1.Notify/ListNotify"
const OperationNotifyListNotifyCategory = "/notify.api.notify.notify.v1.Notify/ListNotifyCategory"
const OperationNotifyUpdateNotify = "/notify.api.notify.notify.v1.Notify/UpdateNotify"
const OperationNotifyUpdateNotifyCategory = "/notify.api.notify.notify.v1.Notify/UpdateNotifyCategory"

type NotifyHTTPServer interface {
	// CreateNotify CreateNotify 创建通知
	CreateNotify(context.Context, *CreateNotifyRequest) (*CreateNotifyReply, error)
	// CreateNotifyCategory CreateNotifyCategory 创建通知分类
	CreateNotifyCategory(context.Context, *CreateNotifyCategoryRequest) (*CreateNotifyCategoryReply, error)
	// DeleteNotify DeleteNotify 删除通知
	DeleteNotify(context.Context, *DeleteNotifyRequest) (*DeleteNotifyReply, error)
	// DeleteNotifyCategory DeleteNotifyCategory 删除通知分类
	DeleteNotifyCategory(context.Context, *DeleteNotifyCategoryRequest) (*DeleteNotifyCategoryReply, error)
	// ListNotify ListNotify 获取通知列表
	ListNotify(context.Context, *ListNotifyRequest) (*ListNotifyReply, error)
	// ListNotifyCategory ListNotifyCategory 获取通知分类列表
	ListNotifyCategory(context.Context, *ListNotifyCategoryRequest) (*ListNotifyCategoryReply, error)
	// UpdateNotify UpdateNotify 更新通知
	UpdateNotify(context.Context, *UpdateNotifyRequest) (*UpdateNotifyReply, error)
	// UpdateNotifyCategory UpdateNotifyCategory 更新通知分类
	UpdateNotifyCategory(context.Context, *UpdateNotifyCategoryRequest) (*UpdateNotifyCategoryReply, error)
}

func RegisterNotifyHTTPServer(s *http.Server, srv NotifyHTTPServer) {
	r := s.Route("/")
	r.GET("/notify/client/v1/notify_categories", _Notify_ListNotifyCategory0_HTTP_Handler(srv))
	r.GET("/notify/api/v1/notify_categories", _Notify_ListNotifyCategory1_HTTP_Handler(srv))
	r.POST("/notify/api/v1/notify_category", _Notify_CreateNotifyCategory0_HTTP_Handler(srv))
	r.PUT("/notify/api/v1/notify_category", _Notify_UpdateNotifyCategory0_HTTP_Handler(srv))
	r.DELETE("/notify/api/v1/notify_category", _Notify_DeleteNotifyCategory0_HTTP_Handler(srv))
	r.GET("/notify/api/v1/notifies", _Notify_ListNotify0_HTTP_Handler(srv))
	r.POST("/notify/api/v1/notify", _Notify_CreateNotify0_HTTP_Handler(srv))
	r.PUT("/notify/api/v1/notify", _Notify_UpdateNotify0_HTTP_Handler(srv))
	r.DELETE("/notify/api/v1/notify", _Notify_DeleteNotify0_HTTP_Handler(srv))
}

func _Notify_ListNotifyCategory0_HTTP_Handler(srv NotifyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListNotifyCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotifyListNotifyCategory)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListNotifyCategory(ctx, req.(*ListNotifyCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListNotifyCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Notify_ListNotifyCategory1_HTTP_Handler(srv NotifyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListNotifyCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotifyListNotifyCategory)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListNotifyCategory(ctx, req.(*ListNotifyCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListNotifyCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Notify_CreateNotifyCategory0_HTTP_Handler(srv NotifyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateNotifyCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotifyCreateNotifyCategory)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateNotifyCategory(ctx, req.(*CreateNotifyCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateNotifyCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Notify_UpdateNotifyCategory0_HTTP_Handler(srv NotifyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateNotifyCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotifyUpdateNotifyCategory)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateNotifyCategory(ctx, req.(*UpdateNotifyCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateNotifyCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Notify_DeleteNotifyCategory0_HTTP_Handler(srv NotifyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNotifyCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotifyDeleteNotifyCategory)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteNotifyCategory(ctx, req.(*DeleteNotifyCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteNotifyCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Notify_ListNotify0_HTTP_Handler(srv NotifyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListNotifyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotifyListNotify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListNotify(ctx, req.(*ListNotifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListNotifyReply)
		return ctx.Result(200, reply)
	}
}

func _Notify_CreateNotify0_HTTP_Handler(srv NotifyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateNotifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotifyCreateNotify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateNotify(ctx, req.(*CreateNotifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateNotifyReply)
		return ctx.Result(200, reply)
	}
}

func _Notify_UpdateNotify0_HTTP_Handler(srv NotifyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateNotifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotifyUpdateNotify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateNotify(ctx, req.(*UpdateNotifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateNotifyReply)
		return ctx.Result(200, reply)
	}
}

func _Notify_DeleteNotify0_HTTP_Handler(srv NotifyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNotifyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotifyDeleteNotify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteNotify(ctx, req.(*DeleteNotifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteNotifyReply)
		return ctx.Result(200, reply)
	}
}

type NotifyHTTPClient interface {
	CreateNotify(ctx context.Context, req *CreateNotifyRequest, opts ...http.CallOption) (rsp *CreateNotifyReply, err error)
	CreateNotifyCategory(ctx context.Context, req *CreateNotifyCategoryRequest, opts ...http.CallOption) (rsp *CreateNotifyCategoryReply, err error)
	DeleteNotify(ctx context.Context, req *DeleteNotifyRequest, opts ...http.CallOption) (rsp *DeleteNotifyReply, err error)
	DeleteNotifyCategory(ctx context.Context, req *DeleteNotifyCategoryRequest, opts ...http.CallOption) (rsp *DeleteNotifyCategoryReply, err error)
	ListNotify(ctx context.Context, req *ListNotifyRequest, opts ...http.CallOption) (rsp *ListNotifyReply, err error)
	ListNotifyCategory(ctx context.Context, req *ListNotifyCategoryRequest, opts ...http.CallOption) (rsp *ListNotifyCategoryReply, err error)
	UpdateNotify(ctx context.Context, req *UpdateNotifyRequest, opts ...http.CallOption) (rsp *UpdateNotifyReply, err error)
	UpdateNotifyCategory(ctx context.Context, req *UpdateNotifyCategoryRequest, opts ...http.CallOption) (rsp *UpdateNotifyCategoryReply, err error)
}

type NotifyHTTPClientImpl struct {
	cc *http.Client
}

func NewNotifyHTTPClient(client *http.Client) NotifyHTTPClient {
	return &NotifyHTTPClientImpl{client}
}

func (c *NotifyHTTPClientImpl) CreateNotify(ctx context.Context, in *CreateNotifyRequest, opts ...http.CallOption) (*CreateNotifyReply, error) {
	var out CreateNotifyReply
	pattern := "/notify/api/v1/notify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotifyCreateNotify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NotifyHTTPClientImpl) CreateNotifyCategory(ctx context.Context, in *CreateNotifyCategoryRequest, opts ...http.CallOption) (*CreateNotifyCategoryReply, error) {
	var out CreateNotifyCategoryReply
	pattern := "/notify/api/v1/notify_category"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotifyCreateNotifyCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NotifyHTTPClientImpl) DeleteNotify(ctx context.Context, in *DeleteNotifyRequest, opts ...http.CallOption) (*DeleteNotifyReply, error) {
	var out DeleteNotifyReply
	pattern := "/notify/api/v1/notify"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNotifyDeleteNotify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NotifyHTTPClientImpl) DeleteNotifyCategory(ctx context.Context, in *DeleteNotifyCategoryRequest, opts ...http.CallOption) (*DeleteNotifyCategoryReply, error) {
	var out DeleteNotifyCategoryReply
	pattern := "/notify/api/v1/notify_category"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNotifyDeleteNotifyCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NotifyHTTPClientImpl) ListNotify(ctx context.Context, in *ListNotifyRequest, opts ...http.CallOption) (*ListNotifyReply, error) {
	var out ListNotifyReply
	pattern := "/notify/api/v1/notifies"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNotifyListNotify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NotifyHTTPClientImpl) ListNotifyCategory(ctx context.Context, in *ListNotifyCategoryRequest, opts ...http.CallOption) (*ListNotifyCategoryReply, error) {
	var out ListNotifyCategoryReply
	pattern := "/notify/api/v1/notify_categories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNotifyListNotifyCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NotifyHTTPClientImpl) UpdateNotify(ctx context.Context, in *UpdateNotifyRequest, opts ...http.CallOption) (*UpdateNotifyReply, error) {
	var out UpdateNotifyReply
	pattern := "/notify/api/v1/notify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotifyUpdateNotify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NotifyHTTPClientImpl) UpdateNotifyCategory(ctx context.Context, in *UpdateNotifyCategoryRequest, opts ...http.CallOption) (*UpdateNotifyCategoryReply, error) {
	var out UpdateNotifyCategoryReply
	pattern := "/notify/api/v1/notify_category"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotifyUpdateNotifyCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
