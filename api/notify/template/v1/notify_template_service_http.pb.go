// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/notify/template/notify_template_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTemplateCreateTemplate = "/notify.api.notify.template.v1.Template/CreateTemplate"
const OperationTemplateDeleteTemplate = "/notify.api.notify.template.v1.Template/DeleteTemplate"
const OperationTemplateListTemplate = "/notify.api.notify.template.v1.Template/ListTemplate"
const OperationTemplateUpdateTemplate = "/notify.api.notify.template.v1.Template/UpdateTemplate"

type TemplateHTTPServer interface {
	// CreateTemplate CreateTemplate 创建发送渠道
	CreateTemplate(context.Context, *CreateTemplateRequest) (*CreateTemplateReply, error)
	// DeleteTemplate DeleteTemplate 删除发送渠道
	DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateReply, error)
	// ListTemplate ListTemplate 获取发送渠道列表
	ListTemplate(context.Context, *ListTemplateRequest) (*ListTemplateReply, error)
	// UpdateTemplate UpdateTemplate 更新发送渠道
	UpdateTemplate(context.Context, *UpdateTemplateRequest) (*UpdateTemplateReply, error)
}

func RegisterTemplateHTTPServer(s *http.Server, srv TemplateHTTPServer) {
	r := s.Route("/")
	r.GET("/notify/api/v1/templates", _Template_ListTemplate0_HTTP_Handler(srv))
	r.POST("/notify/api/v1/template", _Template_CreateTemplate0_HTTP_Handler(srv))
	r.PUT("/notify/api/v1/template", _Template_UpdateTemplate0_HTTP_Handler(srv))
	r.DELETE("/notify/api/v1/template", _Template_DeleteTemplate0_HTTP_Handler(srv))
}

func _Template_ListTemplate0_HTTP_Handler(srv TemplateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTemplateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTemplateListTemplate)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListTemplate(ctx, req.(*ListTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTemplateReply)
		return ctx.Result(200, reply)
	}
}

func _Template_CreateTemplate0_HTTP_Handler(srv TemplateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTemplateCreateTemplate)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateTemplate(ctx, req.(*CreateTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTemplateReply)
		return ctx.Result(200, reply)
	}
}

func _Template_UpdateTemplate0_HTTP_Handler(srv TemplateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTemplateUpdateTemplate)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateTemplate(ctx, req.(*UpdateTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateTemplateReply)
		return ctx.Result(200, reply)
	}
}

func _Template_DeleteTemplate0_HTTP_Handler(srv TemplateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTemplateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTemplateDeleteTemplate)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteTemplate(ctx, req.(*DeleteTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTemplateReply)
		return ctx.Result(200, reply)
	}
}

type TemplateHTTPClient interface {
	CreateTemplate(ctx context.Context, req *CreateTemplateRequest, opts ...http.CallOption) (rsp *CreateTemplateReply, err error)
	DeleteTemplate(ctx context.Context, req *DeleteTemplateRequest, opts ...http.CallOption) (rsp *DeleteTemplateReply, err error)
	ListTemplate(ctx context.Context, req *ListTemplateRequest, opts ...http.CallOption) (rsp *ListTemplateReply, err error)
	UpdateTemplate(ctx context.Context, req *UpdateTemplateRequest, opts ...http.CallOption) (rsp *UpdateTemplateReply, err error)
}

type TemplateHTTPClientImpl struct {
	cc *http.Client
}

func NewTemplateHTTPClient(client *http.Client) TemplateHTTPClient {
	return &TemplateHTTPClientImpl{client}
}

func (c *TemplateHTTPClientImpl) CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...http.CallOption) (*CreateTemplateReply, error) {
	var out CreateTemplateReply
	pattern := "/notify/api/v1/template"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTemplateCreateTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TemplateHTTPClientImpl) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...http.CallOption) (*DeleteTemplateReply, error) {
	var out DeleteTemplateReply
	pattern := "/notify/api/v1/template"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTemplateDeleteTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TemplateHTTPClientImpl) ListTemplate(ctx context.Context, in *ListTemplateRequest, opts ...http.CallOption) (*ListTemplateReply, error) {
	var out ListTemplateReply
	pattern := "/notify/api/v1/templates"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTemplateListTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TemplateHTTPClientImpl) UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...http.CallOption) (*UpdateTemplateReply, error) {
	var out UpdateTemplateReply
	pattern := "/notify/api/v1/template"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTemplateUpdateTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
